<?php
/**
 * UpdateGroupRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PicThrive Internal API
 *
 * Detailed docs about our API, including hidden fields not publicly displayed.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UpdateGroupRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UpdateGroupRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdateGroupRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'thumb' => 'string',
        'thumb_region' => '\OpenAPI\Client\Model\UploadRegion',
        'thumb_id' => 'string',
        'name' => 'string',
        'brand_id' => 'string',
        'hide_from_store' => 'bool',
        'pricing_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'thumb' => null,
        'thumb_region' => null,
        'thumb_id' => null,
        'name' => null,
        'brand_id' => null,
        'hide_from_store' => null,
        'pricing_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'thumb' => 'Thumb',
        'thumb_region' => 'ThumbRegion',
        'thumb_id' => 'ThumbId',
        'name' => 'Name',
        'brand_id' => 'BrandId',
        'hide_from_store' => 'HideFromStore',
        'pricing_id' => 'PricingId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'thumb' => 'setThumb',
        'thumb_region' => 'setThumbRegion',
        'thumb_id' => 'setThumbId',
        'name' => 'setName',
        'brand_id' => 'setBrandId',
        'hide_from_store' => 'setHideFromStore',
        'pricing_id' => 'setPricingId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'thumb' => 'getThumb',
        'thumb_region' => 'getThumbRegion',
        'thumb_id' => 'getThumbId',
        'name' => 'getName',
        'brand_id' => 'getBrandId',
        'hide_from_store' => 'getHideFromStore',
        'pricing_id' => 'getPricingId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['thumb'] = isset($data['thumb']) ? $data['thumb'] : null;
        $this->container['thumb_region'] = isset($data['thumb_region']) ? $data['thumb_region'] : null;
        $this->container['thumb_id'] = isset($data['thumb_id']) ? $data['thumb_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['brand_id'] = isset($data['brand_id']) ? $data['brand_id'] : null;
        $this->container['hide_from_store'] = isset($data['hide_from_store']) ? $data['hide_from_store'] : null;
        $this->container['pricing_id'] = isset($data['pricing_id']) ? $data['pricing_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets thumb
     *
     * @return string|null
     */
    public function getThumb()
    {
        return $this->container['thumb'];
    }

    /**
     * Sets thumb
     *
     * @param string|null $thumb A new path for a different thumbnail to use.
     *
     * @return $this
     */
    public function setThumb($thumb)
    {
        $this->container['thumb'] = $thumb;

        return $this;
    }

    /**
     * Gets thumb_region
     *
     * @return \OpenAPI\Client\Model\UploadRegion|null
     */
    public function getThumbRegion()
    {
        return $this->container['thumb_region'];
    }

    /**
     * Sets thumb_region
     *
     * @param \OpenAPI\Client\Model\UploadRegion|null $thumb_region thumb_region
     *
     * @return $this
     */
    public function setThumbRegion($thumb_region)
    {
        $this->container['thumb_region'] = $thumb_region;

        return $this;
    }

    /**
     * Gets thumb_id
     *
     * @return string|null
     */
    public function getThumbId()
    {
        return $this->container['thumb_id'];
    }

    /**
     * Sets thumb_id
     *
     * @param string|null $thumb_id The PhotoId to use as new Thumbnail.
     *
     * @return $this
     */
    public function setThumbId($thumb_id)
    {
        $this->container['thumb_id'] = $thumb_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The new name of the album
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets brand_id
     *
     * @return string|null
     */
    public function getBrandId()
    {
        return $this->container['brand_id'];
    }

    /**
     * Sets brand_id
     *
     * @param string|null $brand_id The Brand UUID that this album should now below to.
     *
     * @return $this
     */
    public function setBrandId($brand_id)
    {
        $this->container['brand_id'] = $brand_id;

        return $this;
    }

    /**
     * Gets hide_from_store
     *
     * @return bool|null
     */
    public function getHideFromStore()
    {
        return $this->container['hide_from_store'];
    }

    /**
     * Sets hide_from_store
     *
     * @param bool|null $hide_from_store If this album should be hidden from the online store or not.
     *
     * @return $this
     */
    public function setHideFromStore($hide_from_store)
    {
        $this->container['hide_from_store'] = $hide_from_store;

        return $this;
    }

    /**
     * Gets pricing_id
     *
     * @return string|null
     */
    public function getPricingId()
    {
        return $this->container['pricing_id'];
    }

    /**
     * Sets pricing_id
     *
     * @param string|null $pricing_id The Pricing UUID that this album should follow. It makes this album directly tied to that Pricing scheme, instead of using the default.
     *
     * @return $this
     */
    public function setPricingId($pricing_id)
    {
        $this->container['pricing_id'] = $pricing_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


